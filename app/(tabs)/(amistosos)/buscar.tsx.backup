import React, { useState, useMemo } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { router } from 'expo-router';
import { Search, MapPin, Calendar, Clock, Users, Heart, Plus, Filter } from 'lucide-react-native';
import { useAuth } from '@/hooks/auth-context';
import { useData } from '@/hooks/data-context';
import Colors from '@/constants/colors';
import { SuperLayoutStyles } from '@/constants/super-styles';
import SuperButton from '@/components/SuperButton';
import SuperCard from '@/components/SuperCard';
import SuperHeader from '@/components/SuperHeader';

export default function BuscarAmistososScreen() {
  const insets = useSafeAreaInsets();
  const { user } = useAuth();
  const { equipos, partidos } = useData();
  
  const [filtroCategoria, setFiltroCategoria] = useState('todas');
  const [filtroCiudad, setFiltroCiudad] = useState('todas');
  const [refreshing, setRefreshing] = useState(false);

  // Filtrar mis equipos (donde soy entrenador)
  const misEquipos = useMemo(() => {
    return equipos.filter(equipo => 
      equipo.entrenadorId === user?.id
    );
  }, [equipos, user?.id]);

  // Mi disponibilidad actual (simulada)
  const miDisponibilidad = useMemo(() => {
    // Aquí iría la lógica para obtener mi disponibilidad actual
    return null; // Por ahora null, se implementará más adelante
  }, []);

  const onRefresh = React.useCallback(() => {
    setRefreshing(true);
    // Simular actualización de datos
    setTimeout(() => {
      setRefreshing(false);
    }, 2000);
  }, []);

  return (
    <View style={[SuperLayoutStyles.screenContainer, { paddingTop: insets.top }]}>
      <ScrollView 
        style={SuperLayoutStyles.contentContainer} 
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        
        <SuperCard elevated>
          <SuperHeader title="Buscar Amistosos" />
          
          <Text style={styles.sectionDescription}>
            Encuentra equipos disponibles para partidos amistosos en tu área
          </Text>
        </SuperCard>

        {/* Mi disponibilidad */}
        <SuperCard elevated>
          <SuperHeader title="Mi Disponibilidad" />
          
          {miDisponibilidad ? (
            <View style={styles.miDisponibilidadActiva}>
              <Text style={styles.miDisponibilidadText}>
                Tienes una disponibilidad activa
              </Text>
              <SuperButton
                title="Ver Propuestas"
                variant="primary"
                size="medium"
                onPress={() => {/* Ver propuestas recibidas */}}
              />
            </View>
          ) : (
            <View style={styles.miDisponibilidadInfo}>
              <Text style={styles.miDisponibilidadText}>
                Crea una disponibilidad para que otros equipos puedan encontrarte
              </Text>
              <SuperButton
                title="Crear Disponibilidad"
                variant="success"
                size="medium"
                icon={<Plus size={18} color="white" />}
                onPress={() => router.push('/(tabs)/(amistosos)/crear-disponibilidad')}
                fullWidth
              />
            </View>
          )}
        </SuperCard>

        {/* Filtros */}
        <SuperCard elevated>
          <SuperHeader title="Filtros" />
          
          <View style={styles.filtrosContainer}>
            <View style={styles.filtroGroup}>
              <Text style={styles.filtroLabel}>Categoría</Text>
              <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                {['todas', 'Benjamin', 'Alevin', 'Infantil', 'Cadete', 'Juvenil', 'Senior'].map((categoria) => (
                  <TouchableOpacity
                    key={categoria}
                    style={[
                      styles.chip,
                      filtroCategoria === categoria && styles.chipActive
                    ]}
                    onPress={() => setFiltroCategoria(categoria)}
                  >
                    <Text style={[
                      styles.chipText,
                      filtroCategoria === categoria && styles.chipTextActive
                    ]}>
                      {categoria}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          </View>
        </SuperCard>

        {/* Disponibilidades encontradas */}
        <SuperCard elevated>
          <SuperHeader title="Equipos Disponibles" />
          
          {misEquipos.length === 0 ? (
            <View style={styles.emptyState}>
              <Users size={48} color={Colors.textSecondary} />
              <Text style={styles.emptyTitle}>No tienes equipos</Text>
              <Text style={styles.emptyText}>
                Necesitas crear al menos un equipo para buscar amistosos
              </Text>
              <SuperButton
                title="Crear Equipo"
                variant="primary"
                size="medium"
                icon={<Plus size={18} color="white" />}
                onPress={() => router.push('/crear-equipo')}
              />
            </View>
          ) : (
            <View style={styles.emptyState}>
              <Search size={48} color={Colors.textSecondary} />
              <Text style={styles.emptyTitle}>Buscando disponibilidades...</Text>
              <Text style={styles.emptyText}>
                Aquí aparecerán los equipos disponibles para amistosos
              </Text>
            </View>
          )}
        </SuperCard>

      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  sectionDescription: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 16,
    textAlign: 'center',
  },
  miDisponibilidadActiva: {
    padding: 16,
    backgroundColor: Colors.success + '10',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.success,
    alignItems: 'center',
  },
  miDisponibilidadInfo: {
    padding: 16,
    backgroundColor: Colors.surface,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.border,
    alignItems: 'center',
  },
  miDisponibilidadText: {
    fontSize: 14,
    color: Colors.text,
    textAlign: 'center',
    marginBottom: 12,
  },
  filtrosContainer: {
    paddingVertical: 8,
  },
  filtroGroup: {
    marginBottom: 16,
  },
  filtroLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  chip: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: Colors.background,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: Colors.border,
    marginRight: 8,
  },
  chipActive: {
    backgroundColor: Colors.primary,
    borderColor: Colors.primary,
  },
  chipText: {
    fontSize: 14,
    color: Colors.text,
    fontWeight: '500',
  },
  chipTextActive: {
    color: 'white',
  },
  emptyState: {
    alignItems: 'center',
    padding: 32,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 14,
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 24,
  },
});
      </View>

      {/* Panel de filtros */}
      {mostrarFiltros && (
        <View style={styles.filtrosPanel}>
          <View style={styles.filtroRow}>
            <Text style={styles.filtroLabel}>Categoría:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <TouchableOpacity
                style={[
                  GlobalStyles.chip,
                  !filtros.categoria && GlobalStyles.chipActive,
                  { marginRight: 8 }
                ]}
                onPress={() => setFiltros(prev => ({ ...prev, categoria: undefined }))}
              >
                <Text style={[
                  GlobalStyles.chipText,
                  !filtros.categoria && GlobalStyles.chipTextActive
                ]}>
                  Todas
                </Text>
              </TouchableOpacity>
              {categorias.map(categoria => (
                <TouchableOpacity
                  key={categoria}
                  style={[
                    GlobalStyles.chip,
                    filtros.categoria === categoria && GlobalStyles.chipActive,
                    { marginRight: 8 }
                  ]}
                  onPress={() => setFiltros(prev => ({ 
                    ...prev, 
                    categoria: prev.categoria === categoria ? undefined : categoria 
                  }))}
                >
                  <Text style={[
                    GlobalStyles.chipText,
                    filtros.categoria === categoria && GlobalStyles.chipTextActive
                  ]}>
                    {categoria}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          <View style={styles.filtroRow}>
            <Text style={styles.filtroLabel}>Tipo:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <TouchableOpacity
                style={[
                  GlobalStyles.chip,
                  !filtros.tipoFutbol && GlobalStyles.chipActive,
                  { marginRight: 8 }
                ]}
                onPress={() => setFiltros(prev => ({ ...prev, tipoFutbol: undefined }))}
              >
                <Text style={[
                  GlobalStyles.chipText,
                  !filtros.tipoFutbol && GlobalStyles.chipTextActive
                ]}>
                  Todos
                </Text>
              </TouchableOpacity>
              {tiposFutbol.map(tipo => (
                <TouchableOpacity
                  key={tipo}
                  style={[
                    GlobalStyles.chip,
                    filtros.tipoFutbol === tipo && GlobalStyles.chipActive,
                    { marginRight: 8 }
                  ]}
                  onPress={() => setFiltros(prev => ({ 
                    ...prev, 
                    tipoFutbol: prev.tipoFutbol === tipo ? undefined : tipo 
                  }))}
                >
                  <Text style={[
                    GlobalStyles.chipText,
                    filtros.tipoFutbol === tipo && GlobalStyles.chipTextActive
                  ]}>
                    {tipo}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          <View style={styles.filtroRow}>
            <Text style={styles.filtroLabel}>Fecha:</Text>
            <View style={styles.fechaContainer}>
              <View style={styles.fechaInputContainer}>
                <DatePicker
                  value={filtros.fecha || ''}
                  onDateChange={(fecha) => {
                    console.log('📅 Filtro fecha seleccionada:', fecha);
                    setFiltros(prev => ({ ...prev, fecha: fecha || undefined }));
                  }}
                  placeholder="Seleccionar fecha"
                  minimumDate={new Date()}
                />
              </View>
              {filtros.fecha && (
                <TouchableOpacity
                  style={styles.clearFechaBtn}
                  onPress={() => setFiltros(prev => ({ ...prev, fecha: undefined }))}
                >
                  <X size={16} color="#FFFFFF" />
                </TouchableOpacity>
              )}
            </View>
          </View>

          <View style={styles.filtroRow}>
            <Text style={styles.filtroLabel}>Franja Horaria:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <TouchableOpacity
                style={[
                  GlobalStyles.chip,
                  !filtros.franjaHoraria && GlobalStyles.chipActive,
                  { marginRight: 8 }
                ]}
                onPress={() => setFiltros(prev => ({ ...prev, franjaHoraria: undefined }))}
              >
                <Text style={[
                  GlobalStyles.chipText,
                  !filtros.franjaHoraria && GlobalStyles.chipTextActive
                ]}>
                  Todas
                </Text>
              </TouchableOpacity>
              {franjasHorarias.map(franja => (
                <TouchableOpacity
                  key={franja}
                  style={[
                    GlobalStyles.chip,
                    filtros.franjaHoraria === franja && GlobalStyles.chipActive,
                    { marginRight: 8 }
                  ]}
                  onPress={() => setFiltros(prev => ({ 
                    ...prev, 
                    franjaHoraria: prev.franjaHoraria === franja ? undefined : franja 
                  }))}
                >
                  <Text style={[
                    GlobalStyles.chipText,
                    filtros.franjaHoraria === franja && GlobalStyles.chipTextActive
                  ]}>
                    {franja.charAt(0).toUpperCase() + franja.slice(1)}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      )}

      {/* Lista de disponibilidades */}
      <ScrollView style={styles.scrollView}>
        {disponibilidades.length === 0 ? (
          <View style={styles.emptySection}>
            <Search size={48} color={Colors.textLight} />
            <Text style={styles.emptyTitle}>No hay disponibilidades</Text>
            <Text style={styles.emptyText}>
              No se encontraron amistosos disponibles con los filtros seleccionados
            </Text>
            {__DEV__ && (
              <View style={styles.debugInfo}>
                <Text style={styles.debugText}>Debug Info:</Text>
                <Text style={styles.debugText}>Total amistosos: {amistosos.length}</Text>
                <Text style={styles.debugText}>Mis equipos: {misEquipos.length}</Text>
                <Text style={styles.debugText}>Filtros activos: {JSON.stringify(filtros)}</Text>
                {amistosos.length > 0 && (
                  <Text style={styles.debugText}>Amistosos en sistema: {amistosos.map(a => `${a.id}(${a.estado})`).join(', ')}</Text>
                )}
              </View>
            )}
          </View>
        ) : (
          disponibilidades.map(renderDisponibilidad)
        )}
      </ScrollView>

      {/* Modal para proponer amistoso */}
      <Modal
        visible={mostrarModalPropuesta}
        transparent
        animationType="slide"
        onRequestClose={() => setMostrarModalPropuesta(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Proponer Amistoso</Text>
              <TouchableOpacity
                onPress={() => setMostrarModalPropuesta(false)}
              >
                <X size={24} color={Colors.text} />
              </TouchableOpacity>
            </View>

            <Text style={styles.modalSubtitle}>
              Selecciona el equipo con el que quieres jugar:
            </Text>

            <ScrollView style={styles.equiposLista}>
              {misEquipos.map(equipo => (
                <TouchableOpacity
                  key={equipo.id}
                  style={[
                    styles.equipoItem,
                    equipoSeleccionado === equipo.id && styles.equipoSeleccionado
                  ]}
                  onPress={() => setEquipoSeleccionado(equipo.id)}
                >
                  <Text style={[
                    styles.equipoItemText,
                    equipoSeleccionado === equipo.id && styles.equipoItemTextSeleccionado
                  ]}>
                    {equipo.nombre}
                  </Text>
                  <Text style={styles.equipoItemSubtext}>
                    {equipo.categoria} - {equipo.tipoFutbol}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelarBtn}
                onPress={() => setMostrarModalPropuesta(false)}
              >
                <Text style={styles.cancelarBtnText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.enviarBtn,
                  !equipoSeleccionado && styles.enviarBtnDisabled
                ]}
                onPress={() => handleProponerAmistoso(amistosoSeleccionado)}
                disabled={!equipoSeleccionado}
              >
                <Text style={styles.enviarBtnText}>Enviar Propuesta</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.text,
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 16,
    color: Colors.textLight,
    textAlign: 'center',
    marginBottom: 24,
  },
  createButton: {
    backgroundColor: Colors.primary,
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  createButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: Colors.surface,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  filtroButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  filtroButtonText: {
    color: Colors.primary,
    fontSize: 16,
    fontWeight: '600',
  },
  resultadosText: {
    fontSize: 14,
    color: Colors.textLight,
  },
  filtrosPanel: {
    backgroundColor: Colors.surface,
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
    gap: 20,
  },
  filtroRow: {
    marginBottom: 4,
  },
  filtroLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  filtroChip: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    borderRadius: 16,
    backgroundColor: Colors.background,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  filtroChipActivo: {
    backgroundColor: Colors.primary,
    borderColor: Colors.primary,
  },
  filtroChipText: {
    fontSize: 14,
    color: Colors.text,
  },
  filtroChipTextActivo: {
    color: '#FFFFFF',
    fontWeight: '600',
  },
  fechaInputContainer: {
    flex: 1,
    position: 'relative',
  },
  fechaContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 8,
  },
  clearFechaBtn: {
    marginTop: 12,
    padding: 8,
    backgroundColor: Colors.error,
    borderRadius: 8,
  },
  scrollView: {
    flex: 1,
    padding: 16,
  },
  emptySection: {
    alignItems: 'center',
    padding: 40,
  },
  disponibilidadCard: {
    backgroundColor: Colors.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  equipoHeaderContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  equipoNombre: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
  },
  miEquipoLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: Colors.primary,
    backgroundColor: Colors.primary + '20',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 8,
  },
  categoriaContainer: {
    backgroundColor: Colors.primary,
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  categoriaText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  infoContainer: {
    gap: 8,
    marginBottom: 16,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  infoText: {
    fontSize: 14,
    color: Colors.textLight,
    flex: 1,
  },
  proponerBtn: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: Colors.secondary,
    paddingVertical: 12,
    borderRadius: 8,
    gap: 8,
  },
  proponerBtnText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: Colors.surface,
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.text,
  },
  modalSubtitle: {
    fontSize: 16,
    color: Colors.textLight,
    marginBottom: 16,
  },
  equiposLista: {
    maxHeight: 200,
    marginBottom: 20,
  },
  equipoItem: {
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.border,
    marginBottom: 8,
  },
  equipoSeleccionado: {
    borderColor: Colors.primary,
    backgroundColor: Colors.primary + '10',
  },
  equipoItemText: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
  },
  equipoItemTextSeleccionado: {
    color: Colors.primary,
  },
  equipoItemSubtext: {
    fontSize: 14,
    color: Colors.textLight,
    marginTop: 4,
  },
  modalActions: {
    flexDirection: 'row',
    gap: 12,
  },
  cancelarBtn: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.border,
    alignItems: 'center',
  },
  cancelarBtnText: {
    color: Colors.text,
    fontSize: 16,
    fontWeight: '600',
  },
  enviarBtn: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: Colors.primary,
    alignItems: 'center',
  },
  enviarBtnDisabled: {
    backgroundColor: Colors.textLight,
  },
  enviarBtnText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  debugInfo: {
    backgroundColor: Colors.surface,
    padding: 12,
    borderRadius: 8,
    marginTop: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  debugText: {
    fontSize: 12,
    color: Colors.textLight,
    marginBottom: 4,
  },
  miDisponibilidadInfo: {
    backgroundColor: Colors.primary + '10',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.primary + '30',
  },
  miDisponibilidadText: {
    fontSize: 14,
    color: Colors.primary,
    textAlign: 'center',
    fontWeight: '500',
    marginBottom: 8,
  },
  verPropuestasBtn: {
    alignSelf: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: Colors.primary,
  },
  verPropuestasText: {
    fontSize: 12,
    color: Colors.primary,
    fontWeight: '600',
  },
});